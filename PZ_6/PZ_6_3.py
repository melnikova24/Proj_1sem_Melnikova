# Вариант 27
# Дано множество А из N точек (N > 2), точки заданы своими координатами (х, у).
# Найти наибольший периметр треугольника, вершины которого принадлежат различным точкам
# множества А, и сами эти точки (точки выводятся в том же порядке, в котором
# они перечислены при задании множества А). Расстояние R между точками с координатами
# (х1, у1) и (х2, у2) вычисляется по формуле: R = sqrt(sqr(x2 - x1) + sqr(y2 - yl)).
# Для хранения данных о каждом наборе точек следует использовать по два список: первый
# список для хранения абсцисс, второй - для хранения ординат.

from random import randint
from math import sqrt


# функция для нахождения расстояния между точками
def r(point1, point2):
    return sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2)


n = int(input('n > 2: '))
my_list = []

# создаем двумерный список с координатами x и y
for i in range(n):
    xy = [randint(-100, 100), randint(-100, 100)]
    if xy not in my_list:
        my_list.append(xy)

# переменные для максимального периметра и максимальных точек
max_p = 0
max_1 = []
max_2 = []
max_3 = []

# тремя циклами сравниваем периметр треугольника с вершинами в каждом наборе точек
for i in my_list:
    for j in my_list:
        for k in my_list:

            # вычисляем стороны треугольника
            a = r(i, j)
            b = r(i, k)
            c = r(j, k)

            # вводим проверку, чтобы точки не повторялись
            if a == b or b == c or a == c:
                continue

            p = a + b + c
            # если найденный периметр больше максимального, то:
            if p > max_p:
                max_p = p
                max_1 = i
                max_2 = j
                max_3 = k

print("Периметр треугольника: ", max_p)
print("Точки :", max_1, max_2, max_3)
